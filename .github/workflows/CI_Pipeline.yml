name: CI Pipeline
on:
    workflow_dispatch: 
    # push:
    # pull_request: 
    #   branches: 
    #     - main
    #     - develop
env:
  path: ./src
  CCN: 12
  Threshold: nloc=30
  arguments: 4
  language: cpp
  verbose: true

jobs:
    build_unit_tets:
        name: Build Unit Tests
        runs-on: ubuntu-latest
        steps:
            - name: checkout
              uses: actions/checkout@v4
      
            - name: Get Ninja
              uses: seanmiddleditch/gha-setup-ninja@master 
      
            - name: Build 
              working-directory: test/lcd_hd44780
              run: |
                mkdir out
                cmake -Bout -GNinja
                cmake --build out

            - name: Save Build Artifacts
              uses: actions/upload-artifact@v4
              with:
                name: lcd_hd44780_unit_tests_app
                path: ./test/lcd_hd44780/out
                if-no-files-found: warn
                retention-days: 1
                overwrite: true
            
    
    build_STM32G071RB_NUCLEO_BARE_METAL:
        name: Build STM32G071RB_NUCLEO_BARE_METAL
        runs-on: ubuntu-latest
        steps:
            - name: checkout
              uses: actions/checkout@v4

            - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
              uses: carlosperate/arm-none-eabi-gcc-action@v1
      
            - name: Get Ninja
              uses: seanmiddleditch/gha-setup-ninja@master 
      
            - name: Build 
              working-directory: examples/STM32G071RB_NUCLEO_BARE_METAL
              run: |
                mkdir out
                cmake -Bout -GNinja -DCMAKE_BUILD_TYPE=Debug
                cmake --build out

    build_STM32G474RE_NUCLEO_CUBE_IDE_LL:
        name: Build STM32G474RE_NUCLEO_CUBE_IDE_LL
        runs-on: ubuntu-latest
        steps:
            - name: checkout
              uses: actions/checkout@v4

            - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
              uses: carlosperate/arm-none-eabi-gcc-action@v1
        
            - name: Get Ninja
              uses: seanmiddleditch/gha-setup-ninja@master 
        
            - name: Build 
              working-directory: examples/STM32G474RE_NUCLEO_CUBE_IDE_LL
              run: |
                mkdir out
                cmake -Bout -GNinja -DCMAKE_BUILD_TYPE=Debug
                cmake --build out

    # build_ATMEGA328P_ARDUINO_UNO_R3: #No action with avr-gcc toolchain found
    #   name: Build ATMEGA328P_ARDUINO_UNO_R3
    #   runs-on: ubuntu-latest
    #   steps:
    #       - name: checkout
    #         uses: actions/checkout@v4

    #       # - name: Install AVR Toolchain
    #       #   uses: carlosperate/arm-none-eabi-gcc-action@v1 
      
    #       - name: Get Ninja
    #         uses: seanmiddleditch/gha-setup-ninja@master 
      
    #       - name: Build 
    #         working-directory: examples/ATMEGA328P_ARDUINO_UNO_R3
    #         run: |
    #           mkdir out
    #           cmake -Bout -GNinja -DCMAKE_BUILD_TYPE=Debug
    #           cmake --build out

    run_clang-format_check:
        name: Run Clang-format Check
        strategy:
          matrix:
            path:
              - check: 'src'
                exclude: ''
              - check: 'test'
                exclude: '(hw_test|unity|template)'
        runs-on: ubuntu-latest
        needs: [build_unit_tets,build_STM32G071RB_NUCLEO_BARE_METAL, build_STM32G474RE_NUCLEO_CUBE_IDE_LL]
        steps:
            - name: checkout
              uses: actions/checkout@v4

            - name: Run clang-format style check for C/C++/Protobuf programs.
              uses: jidicula/clang-format-action@v4.13.0
              with:
                clang-format-version: '18'
                check-path: ${{matrix.path['check']}}
                exclude-regex: ${{matrix.path['exclude']}}
    
    run_unit_tests:
        name: Run Unit Tests
        runs-on: ubuntu-latest
        needs: [build_unit_tets,build_STM32G071RB_NUCLEO_BARE_METAL, build_STM32G474RE_NUCLEO_CUBE_IDE_LL]
        steps:
          - name: Download Unit Tests Build Artifacts
            uses: actions/download-artifact@v4
            with:
              name: lcd_hd44780_unit_tests_app

          - name: Run Unit Tests
            run: |
              chmod +x lcd_hd44780_test
              ./lcd_hd44780_test -v
    
    run_code_coverage_check:
        name: Run Code Coverage Check
        runs-on: ubuntu-latest
        needs: [build_unit_tets,build_STM32G071RB_NUCLEO_BARE_METAL, build_STM32G474RE_NUCLEO_CUBE_IDE_LL]
        steps:
            - name: checkout
              uses: actions/checkout@v4

            - name: Download Unit Tests Build Artifacts
              uses: actions/download-artifact@v4
              with:
                name: lcd_hd44780_unit_tests_app
                path: test/lcd_hd44780/out

            - name: Run Unit Tests
              continue-on-error: true
              working-directory: test/lcd_hd44780/out
              run: |
                chmod +x lcd_hd44780_test
                ./lcd_hd44780_test -v

            - name: Check Test Coverage
              uses: threeal/gcovr-action@v1.1.0
              with:
                excludes: test
                fail-under-line: 90
    
    run_cppcheck:
        name: Run CppCheck
        runs-on: ubuntu-latest
        needs: [build_unit_tets,build_STM32G071RB_NUCLEO_BARE_METAL, build_STM32G474RE_NUCLEO_CUBE_IDE_LL]
        steps:
            - name: checkout
              uses: actions/checkout@v4

            - name: Run cppcheck-annotation-action
              uses: niwciu/cppcheck-annotation-action@develop
              with:
                sources: ./src ./test/lcd_hd44780
                additional-args: --force -UUNITY_FIXTURE_FREE -UUNITY_FIXTURE_MALLOC -UUNITY_OUTPUT_CHAR
                log-level: verbose
                std: c99
                suppress: missingIncludeSystem,missingInclude # unusedFunction: ./test/lcd_hd44780/master_PDU_read_test_runner.c
                action-fail-level: 'failure,warning'
                # annotation-notices:
                # annotation-failures: 
                # annotation-warnings: 
                # annotation-level-default: 

            - name: Annotate lines with errors
              if: always()
              uses: yuzutech/annotations-action@v0.5.0
              with:
                repo-token: "${{ secrets.GITHUB_TOKEN }}"
                title: 'Results of CppCheck'
                input: 'annotations.json'
            

    run_code_complexity_check:
        name: Run Code Complexity Check
        runs-on: ubuntu-latest
        needs: [build_unit_tets,build_STM32G071RB_NUCLEO_BARE_METAL, build_STM32G474RE_NUCLEO_CUBE_IDE_LL]
        steps:
            - name: checkout
              uses: actions/checkout@v4

            - name: Lizard Runner
              uses: niwciu/Lizard-Runner@develop
              with: 
                path: ${{env.path}}
                CCN: ${{env.CCN}}
                Threshold: ${{env.Threshold}}
                arguments: ${{env.arguments}}
                language: ${{env.language}}
                verbose: ${{env.verbose}}

          
    generate_code_coverage_report:
        name: Generate Code Coverage Report
        runs-on: ubuntu-latest
        needs: 
            - run_clang-format_check
            - run_unit_tests
            - run_code_coverage_check
            - run_cppcheck
            - run_code_complexity_check
        steps:
            - name: checkout
              uses: actions/checkout@v4

            - name: Download Unit Tests Build Artifacts
              uses: actions/download-artifact@v4
              with:
                name: lcd_hd44780_unit_tests_app
                path: test/lcd_hd44780/out

            - name: Run Unit Tests
              continue-on-error: true
              working-directory: test/lcd_hd44780/out
              run: |
                chmod +x lcd_hd44780_test
                ./lcd_hd44780_test -v
            
            - name: Create GCOVR Report Folder
              run: mkdir -p ./reports/CCR/JSON_ALL/HTML_OUT

            - name: Generate Code Coverage Report
              uses: threeal/gcovr-action@v1.1.0
              with:
                excludes: test
                html-out: ./reports/CCR/JSON_ALL/HTML_OUT/coverage_report.html
                html-details: true
                html-title: LCD HD44780 Test Coverage Report
                html-theme: github.dark-green

            - name: Save Code Coverage Report
              uses: actions/upload-artifact@v4
              with:
                  name: Code_Coverage_Report
                  path: ./reports  # need to save all files in folder
                  if-no-files-found: warn
                  retention-days: 5
                  overwrite: true

    generate_code_complexity_report:
        name: Generate Code Complexity Report
        runs-on: ubuntu-latest
        needs: 
            - run_clang-format_check
            - run_unit_tests
            - run_code_coverage_check
            - run_cppcheck
            - run_code_complexity_check
        steps:
            - name: checkout
              uses: actions/checkout@v4

            - name: Create Report Folder
              run: mkdir -p ./reports/CCM

            - name: Lizard Runner
              uses: niwciu/Lizard-Runner@develop
              with: 
                path: ${{env.path}}
                CCN: ${{env.CCN}}
                Threshold: ${{env.Threshold}}
                arguments: ${{env.arguments}}
                language: ${{env.language}}
                verbose: ${{env.verbose}}
                output_file: ./reports/CCM/code_complexity_report.html

            - name: Save code complexity report
              uses: actions/upload-artifact@v4
              with:
                  name: Code_Complexity_Report
                  path: ./reports
                  if-no-files-found: warn
                  retention-days: 5
                  overwrite: true
        
